{"ast":null,"code":"import { MixedType } from './MixedType';\nexport class ArrayType extends MixedType {\n  constructor(errorMessage) {\n    super('array');\n    super.pushRule({\n      onValid: v => Array.isArray(v),\n      errorMessage: errorMessage || this.locale.type\n    });\n  }\n  rangeLength(minLength, maxLength) {\n    let errorMessage = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : this.locale.rangeLength;\n    super.pushRule({\n      onValid: value => value.length >= minLength && value.length <= maxLength,\n      errorMessage,\n      params: {\n        minLength,\n        maxLength\n      }\n    });\n    return this;\n  }\n  minLength(minLength) {\n    let errorMessage = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.locale.minLength;\n    super.pushRule({\n      onValid: value => value.length >= minLength,\n      errorMessage,\n      params: {\n        minLength\n      }\n    });\n    return this;\n  }\n  maxLength(maxLength) {\n    let errorMessage = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.locale.maxLength;\n    super.pushRule({\n      onValid: value => value.length <= maxLength,\n      errorMessage,\n      params: {\n        maxLength\n      }\n    });\n    return this;\n  }\n  unrepeatable() {\n    let errorMessage = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.locale.unrepeatable;\n    super.pushRule({\n      onValid: items => {\n        const hash = {};\n        for (const i in items) {\n          if (hash[items[i]]) {\n            return false;\n          }\n          hash[items[i]] = true;\n        }\n        return true;\n      },\n      errorMessage\n    });\n    return this;\n  }\n  of(type) {\n    super.pushRule({\n      onValid: (items, data, filedName) => {\n        const checkResults = items.map((value, index) => {\n          const name = Array.isArray(filedName) ? [...filedName, `[${index}]`] : [filedName, `[${index}]`];\n          return type.check(value, data, name);\n        });\n        const hasError = !!checkResults.find(item => item === null || item === void 0 ? void 0 : item.hasError);\n        return {\n          hasError,\n          array: checkResults\n        };\n      }\n    });\n    return this;\n  }\n}\nexport default function getArrayType(errorMessage) {\n  return new ArrayType(errorMessage);\n}","map":{"version":3,"sources":["../src/ArrayType.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import { MixedType } from './MixedType';\nexport class ArrayType extends MixedType {\n    constructor(errorMessage) {\n        super('array');\n        super.pushRule({\n            onValid: v => Array.isArray(v),\n            errorMessage: errorMessage || this.locale.type\n        });\n    }\n    rangeLength(minLength, maxLength, errorMessage = this.locale.rangeLength) {\n        super.pushRule({\n            onValid: (value) => value.length >= minLength && value.length <= maxLength,\n            errorMessage,\n            params: { minLength, maxLength }\n        });\n        return this;\n    }\n    minLength(minLength, errorMessage = this.locale.minLength) {\n        super.pushRule({\n            onValid: value => value.length >= minLength,\n            errorMessage,\n            params: { minLength }\n        });\n        return this;\n    }\n    maxLength(maxLength, errorMessage = this.locale.maxLength) {\n        super.pushRule({\n            onValid: value => value.length <= maxLength,\n            errorMessage,\n            params: { maxLength }\n        });\n        return this;\n    }\n    unrepeatable(errorMessage = this.locale.unrepeatable) {\n        super.pushRule({\n            onValid: items => {\n                const hash = {};\n                for (const i in items) {\n                    if (hash[items[i]]) {\n                        return false;\n                    }\n                    hash[items[i]] = true;\n                }\n                return true;\n            },\n            errorMessage\n        });\n        return this;\n    }\n    of(type) {\n        super.pushRule({\n            onValid: (items, data, filedName) => {\n                const checkResults = items.map((value, index) => {\n                    const name = Array.isArray(filedName)\n                        ? [...filedName, `[${index}]`]\n                        : [filedName, `[${index}]`];\n                    return type.check(value, data, name);\n                });\n                const hasError = !!checkResults.find(item => item === null || item === void 0 ? void 0 : item.hasError);\n                return {\n                    hasError,\n                    array: checkResults\n                };\n            }\n        });\n        return this;\n    }\n}\nexport default function getArrayType(errorMessage) {\n    return new ArrayType(errorMessage);\n}\n//# sourceMappingURL=ArrayType.js.map"]},"metadata":{},"sourceType":"module"}