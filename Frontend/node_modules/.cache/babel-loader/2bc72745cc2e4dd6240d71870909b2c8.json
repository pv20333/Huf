{"ast":null,"code":"import formatErrorMessage from './formatErrorMessage';\nfunction isObj(o) {\n  return o != null && (typeof o === 'object' || typeof o == 'function');\n}\nfunction isPromiseLike(v) {\n  return v instanceof Promise || isObj(v) && typeof v.then === 'function';\n}\n/**\n * Create a data validator\n * @param data\n */\nexport function createValidator(data, name) {\n  return (value, rules) => {\n    for (let i = 0; i < rules.length; i += 1) {\n      const {\n        onValid,\n        errorMessage,\n        params,\n        isAsync\n      } = rules[i];\n      if (isAsync) continue;\n      const checkResult = onValid(value, data, name);\n      if (checkResult === false) {\n        return {\n          hasError: true,\n          errorMessage: formatErrorMessage(errorMessage, {\n            ...params,\n            name: Array.isArray(name) ? name.join('.') : name\n          })\n        };\n      } else if (isPromiseLike(checkResult)) {\n        throw new Error('synchronous validator had an async result, you should probably call \"checkAsync()\"');\n      } else if (typeof checkResult === 'object' && (checkResult.hasError || checkResult.array)) {\n        return checkResult;\n      }\n    }\n    return null;\n  };\n}\nexport default createValidator;","map":{"version":3,"sources":["../../src/utils/createValidator.ts"],"names":[],"mappings":"AACA,OAAO,kBAAkB,MAAM,sBAAsB;AACrD,SAAS,KAAK,CAAC,CAAU,EAAA;EACvB,OAAO,CAAC,IAAI,IAAI,KAAK,OAAO,CAAC,KAAK,QAAQ,IAAI,OAAO,CAAC,IAAI,UAAU,CAAC;AACvE;AACA,SAAS,aAAa,CAAC,CAAU,EAAA;EAC/B,OAAO,CAAC,YAAY,OAAO,IAAK,KAAK,CAAC,CAAC,CAAC,IAAI,OAAO,CAAC,CAAC,IAAI,KAAK,UAAW;AAC3E;AACA;;;AAGG;AACH,OAAM,SAAU,eAAe,CAAU,IAAQ,EAAE,IAAwB,EAAA;EACzE,OAAO,CAAC,KAAQ,EAAE,KAA0B,KAA2B;IACrE,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,KAAK,CAAC,MAAM,EAAE,CAAC,IAAI,CAAC,EAAE;MACxC,MAAM;QAAE,OAAO;QAAE,YAAY;QAAE,MAAM;QAAE;MAAO,CAAE,GAAG,KAAK,CAAC,CAAC,CAAC;MAC3D,IAAI,OAAO,EAAE;MACb,MAAM,WAAW,GAAG,OAAO,CAAC,KAAK,EAAE,IAAI,EAAE,IAAI,CAAC;MAE9C,IAAI,WAAW,KAAK,KAAK,EAAE;QACzB,OAAO;UACL,QAAQ,EAAE,IAAI;UACd,YAAY,EAAE,kBAAkB,CAAI,YAAY,EAAE;YAChD,GAAG,MAAM;YACT,IAAI,EAAE,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,GAAG,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,GAAG;WAC9C;SACF;OACF,MAAM,IAAI,aAAa,CAAC,WAAW,CAAC,EAAE;QACrC,MAAM,IAAI,KAAK,CACb,oFAAoF,CACrF;OACF,MAAM,IAAI,OAAO,WAAW,KAAK,QAAQ,KAAK,WAAW,CAAC,QAAQ,IAAI,WAAW,CAAC,KAAK,CAAC,EAAE;QACzF,OAAO,WAAW;MACnB;IACF;IAED,OAAO,IAAI;EACb,CAAC;AACH;AAEA,eAAe,eAAe","sourceRoot":"","sourcesContent":["import formatErrorMessage from './formatErrorMessage';\nfunction isObj(o) {\n    return o != null && (typeof o === 'object' || typeof o == 'function');\n}\nfunction isPromiseLike(v) {\n    return v instanceof Promise || (isObj(v) && typeof v.then === 'function');\n}\n/**\n * Create a data validator\n * @param data\n */\nexport function createValidator(data, name) {\n    return (value, rules) => {\n        for (let i = 0; i < rules.length; i += 1) {\n            const { onValid, errorMessage, params, isAsync } = rules[i];\n            if (isAsync)\n                continue;\n            const checkResult = onValid(value, data, name);\n            if (checkResult === false) {\n                return {\n                    hasError: true,\n                    errorMessage: formatErrorMessage(errorMessage, {\n                        ...params,\n                        name: Array.isArray(name) ? name.join('.') : name\n                    })\n                };\n            }\n            else if (isPromiseLike(checkResult)) {\n                throw new Error('synchronous validator had an async result, you should probably call \"checkAsync()\"');\n            }\n            else if (typeof checkResult === 'object' && (checkResult.hasError || checkResult.array)) {\n                return checkResult;\n            }\n        }\n        return null;\n    };\n}\nexport default createValidator;\n//# sourceMappingURL=createValidator.js.map"]},"metadata":{},"sourceType":"module"}