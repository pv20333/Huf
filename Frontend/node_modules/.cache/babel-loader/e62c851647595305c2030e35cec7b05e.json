{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\tiago\\\\OneDrive\\\\Documentos\\\\GitHub\\\\Huf\\\\Frontend\\\\src\\\\view\\\\pages\\\\parametros-padrao\\\\parametros-form\\\\PPdetalhes\\\\detalhes.jsx\",\n  _s = $RefreshSig$();\nimport { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport axios from 'axios';\nimport { Table } from 'antd';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst Detalhes = () => {\n  _s();\n  const {\n    n_ParametroPadrao\n  } = useParams();\n  const [parametroPadrao, setParametroPadrao] = useState(null);\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        const response = await axios.get(`http://localhost:8080/api/renderizarpp/parametroPadraoDetalhado/${n_ParametroPadrao}`);\n        setParametroPadrao(response.data);\n        console.log(response.data);\n      } catch (error) {\n        console.error(\"Erro ao buscar detalhes do ParametroPadrao: \", error);\n      }\n    };\n    fetchData();\n  }, [n_ParametroPadrao]);\n  let tabelas = {};\n  let linhaAtual = {};\n  if (parametroPadrao) {\n    for (let i = 0; i < parametroPadrao.TabelaRespostas.length; i++) {\n      const resposta = parametroPadrao.TabelaRespostas[i];\n      const idTabela = resposta.TabelaColuna.n_TabelaGeral;\n      if (!tabelas[idTabela]) {\n        tabelas[idTabela] = {\n          designacao: resposta.TabelaColuna.TabelaGeral.designacao,\n          numero_linhas: resposta.TabelaColuna.TabelaGeral.numero_linhas,\n          colunas: new Set(),\n          linhas: []\n        };\n        // Inicializa a linha atual para cada tabela\n        linhaAtual[idTabela] = 1;\n      }\n      tabelas[idTabela].colunas.add(resposta.TabelaColuna.TituloColunas);\n      if (!tabelas[idTabela].linhas[linhaAtual[idTabela] - 1]) {\n        tabelas[idTabela].linhas[linhaAtual[idTabela] - 1] = {\n          key: linhaAtual[idTabela]\n        };\n      }\n      tabelas[idTabela].linhas[linhaAtual[idTabela] - 1][resposta.TabelaColuna.TituloColunas] = resposta.respostas;\n\n      // Incrementa a linha atual após uma resposta ser adicionada, apenas se a próxima resposta for de uma linha diferente\n      if (i < parametroPadrao.TabelaRespostas.length - 1) {\n        var _proximaResposta$n_Li;\n        const proximaResposta = parametroPadrao.TabelaRespostas[i + 1];\n        const n_LinhaProxima = (_proximaResposta$n_Li = proximaResposta.n_Linha) !== null && _proximaResposta$n_Li !== void 0 ? _proximaResposta$n_Li : proximaResposta.n_TabelaRespostas % tabelas[idTabela].numero_linhas || tabelas[idTabela].numero_linhas;\n        const n_LinhaAtual = linhaAtual[idTabela];\n        if (n_LinhaProxima !== n_LinhaAtual) {\n          linhaAtual[idTabela]++;\n        }\n      }\n    }\n  }\n  console.log(tabelas);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: parametroPadrao ? /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [\"Detalhes para o parametro padrao: \", n_ParametroPadrao, /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Descri\\xE7\\xE3o: \", parametroPadrao.descricao]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Estados:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 11\n      }, this), Object.entries(tabelas).map(_ref => {\n        let [key, tabela] = _ref;\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n            children: tabela.designacao\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 73,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Table, {\n            columns: Array.from(tabela.colunas).map(coluna => ({\n              title: coluna,\n              dataIndex: coluna,\n              key: coluna\n            })),\n            dataSource: tabela.linhas,\n            pagination: false\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 74,\n            columnNumber: 15\n          }, this), console.log(tabela.linhas)]\n        }, key, true, {\n          fileName: _jsxFileName,\n          lineNumber: 72,\n          columnNumber: 13\n        }, this);\n      }), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"n_Formulario: \", parametroPadrao.n_Formularios]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"n_VersaoFormulario: \", parametroPadrao.n_VersaoFormulario]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true) : /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"A carregar...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 65,\n    columnNumber: 5\n  }, this);\n};\n_s(Detalhes, \"BNfHCMihvPVgrN2XykYUiZHwYKI=\", false, function () {\n  return [useParams];\n});\n_c = Detalhes;\nexport default Detalhes;\nvar _c;\n$RefreshReg$(_c, \"Detalhes\");","map":{"version":3,"names":["useEffect","useState","useParams","axios","Table","jsxDEV","_jsxDEV","Fragment","_Fragment","Detalhes","_s","n_ParametroPadrao","parametroPadrao","setParametroPadrao","fetchData","response","get","data","console","log","error","tabelas","linhaAtual","i","TabelaRespostas","length","resposta","idTabela","TabelaColuna","n_TabelaGeral","designacao","TabelaGeral","numero_linhas","colunas","Set","linhas","add","TituloColunas","key","respostas","_proximaResposta$n_Li","proximaResposta","n_LinhaProxima","n_Linha","n_TabelaRespostas","n_LinhaAtual","children","descricao","fileName","_jsxFileName","lineNumber","columnNumber","Object","entries","map","_ref","tabela","columns","Array","from","coluna","title","dataIndex","dataSource","pagination","n_Formularios","n_VersaoFormulario","_c","$RefreshReg$"],"sources":["C:/Users/tiago/OneDrive/Documentos/GitHub/Huf/Frontend/src/view/pages/parametros-padrao/parametros-form/PPdetalhes/detalhes.jsx"],"sourcesContent":["import { useEffect, useState } from 'react';\r\nimport { useParams } from 'react-router-dom';\r\nimport axios from 'axios';\r\nimport { Table } from 'antd';\r\n\r\nconst Detalhes = () => {\r\n  const { n_ParametroPadrao } = useParams();\r\n  const [parametroPadrao, setParametroPadrao] = useState(null);\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      try {\r\n        const response = await axios.get(`http://localhost:8080/api/renderizarpp/parametroPadraoDetalhado/${n_ParametroPadrao}`);\r\n        setParametroPadrao(response.data);\r\n        console.log(response.data);\r\n      } catch (error) {\r\n        console.error(\"Erro ao buscar detalhes do ParametroPadrao: \", error);\r\n      }\r\n    };\r\n    fetchData();\r\n  }, [n_ParametroPadrao]);\r\n\r\n  let tabelas = {};\r\n  let linhaAtual = {};\r\n  if (parametroPadrao) {\r\n    for (let i = 0; i < parametroPadrao.TabelaRespostas.length; i++) {\r\n      const resposta = parametroPadrao.TabelaRespostas[i];\r\n      const idTabela = resposta.TabelaColuna.n_TabelaGeral;\r\n      if (!tabelas[idTabela]) {\r\n        tabelas[idTabela] = {\r\n          designacao: resposta.TabelaColuna.TabelaGeral.designacao,\r\n          numero_linhas: resposta.TabelaColuna.TabelaGeral.numero_linhas,\r\n          colunas: new Set(),\r\n          linhas: [],\r\n        };\r\n        // Inicializa a linha atual para cada tabela\r\n        linhaAtual[idTabela] = 1;\r\n      }\r\n      tabelas[idTabela].colunas.add(resposta.TabelaColuna.TituloColunas);\r\n  \r\n      if (!tabelas[idTabela].linhas[linhaAtual[idTabela] - 1]) {\r\n        tabelas[idTabela].linhas[linhaAtual[idTabela] - 1] = { key: linhaAtual[idTabela] };\r\n      }\r\n  \r\n      tabelas[idTabela].linhas[linhaAtual[idTabela] - 1][resposta.TabelaColuna.TituloColunas] = resposta.respostas;\r\n  \r\n      // Incrementa a linha atual após uma resposta ser adicionada, apenas se a próxima resposta for de uma linha diferente\r\n      if (i < parametroPadrao.TabelaRespostas.length - 1) {\r\n        const proximaResposta = parametroPadrao.TabelaRespostas[i + 1];\r\n        const n_LinhaProxima = proximaResposta.n_Linha ?? (proximaResposta.n_TabelaRespostas % tabelas[idTabela].numero_linhas || tabelas[idTabela].numero_linhas);\r\n        const n_LinhaAtual = linhaAtual[idTabela];\r\n  \r\n        if (n_LinhaProxima !== n_LinhaAtual) {\r\n          linhaAtual[idTabela]++;\r\n        }\r\n      }\r\n    }\r\n  }\r\n  \r\n  \r\n\r\n  console.log(tabelas)\r\n\r\n  return (\r\n    <div>\r\n      {parametroPadrao ? (\r\n        <>\r\n          Detalhes para o parametro padrao: {n_ParametroPadrao}\r\n          <p>Descrição: {parametroPadrao.descricao}</p>\r\n          <p>Estados:</p>\r\n          {Object.entries(tabelas).map(([key, tabela]) => (\r\n            <div key={key}>\r\n              <h2>{tabela.designacao}</h2>\r\n              <Table\r\n                columns={Array.from(tabela.colunas).map((coluna) => ({\r\n                  title: coluna,\r\n                  dataIndex: coluna,\r\n                  key: coluna,\r\n                }))}\r\n                dataSource={tabela.linhas}\r\n                pagination={false}\r\n              />\r\n              {              console.log(tabela.linhas)}\r\n            </div>\r\n          ))}\r\n          <p>n_Formulario: {parametroPadrao.n_Formularios}</p>\r\n          <p>n_VersaoFormulario: {parametroPadrao.n_VersaoFormulario}</p>\r\n        </>\r\n      ) : (\r\n        <p>A carregar...</p>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Detalhes;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}