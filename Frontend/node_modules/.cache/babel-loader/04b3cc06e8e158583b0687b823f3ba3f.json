{"ast":null,"code":"import { MixedType } from './MixedType';\nexport class DateType extends MixedType {\n  constructor(errorMessage) {\n    super('date');\n    super.pushRule({\n      onValid: value => !/Invalid|NaN/.test(new Date(value).toString()),\n      errorMessage: errorMessage || this.locale.type\n    });\n  }\n  range(min, max) {\n    let errorMessage = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : this.locale.range;\n    super.pushRule({\n      onValid: value => new Date(value) >= new Date(min) && new Date(value) <= new Date(max),\n      errorMessage,\n      params: {\n        min,\n        max\n      }\n    });\n    return this;\n  }\n  min(min) {\n    let errorMessage = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.locale.min;\n    super.pushRule({\n      onValid: value => new Date(value) >= new Date(min),\n      errorMessage,\n      params: {\n        min\n      }\n    });\n    return this;\n  }\n  max(max) {\n    let errorMessage = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.locale.max;\n    super.pushRule({\n      onValid: value => new Date(value) <= new Date(max),\n      errorMessage,\n      params: {\n        max\n      }\n    });\n    return this;\n  }\n}\nexport default function getDateType(errorMessage) {\n  return new DateType(errorMessage);\n}","map":{"version":3,"sources":["../src/DateType.ts"],"names":[],"mappings":"AAAA,SAAS,SAAS,QAAQ,aAAa;AAIvC,OAAM,MAAO,QAA+C,SAAQ,SAKnE,CAAA;EACC,WAAA,CAAY,YAAyB,EAAA;IACnC,KAAK,CAAC,MAAM,CAAC;IACb,KAAK,CAAC,QAAQ,CAAC;MACb,OAAO,EAAE,KAAK,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,CAAC,QAAQ,EAAE,CAAC;MACjE,YAAY,EAAE,YAAY,IAAI,IAAI,CAAC,MAAM,CAAC;KAC3C,CAAC;EACJ;EAEA,KAAK,CAAC,GAAkB,EAAE,GAAkB,EAA8C;IAAA,IAA5C,YAAA,GAAA,SAAA,CAAA,MAAA,QAAA,SAAA,QAAA,SAAA,GAAA,SAAA,MAA2B,IAAI,CAAC,MAAM,CAAC,KAAK;IACxF,KAAK,CAAC,QAAQ,CAAC;MACb,OAAO,EAAE,KAAK,IAAI,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,GAAG,CAAC,IAAI,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,GAAG,CAAC;MACtF,YAAY;MACZ,MAAM,EAAE;QAAE,GAAG;QAAE;MAAG;KACnB,CAAC;IACF,OAAO,IAAI;EACb;EAEA,GAAG,CAAC,GAAkB,EAA4C;IAAA,IAA1C,YAAA,GAAA,SAAA,CAAA,MAAA,QAAA,SAAA,QAAA,SAAA,GAAA,SAAA,MAA2B,IAAI,CAAC,MAAM,CAAC,GAAG;IAChE,KAAK,CAAC,QAAQ,CAAC;MACb,OAAO,EAAE,KAAK,IAAI,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,GAAG,CAAC;MAClD,YAAY;MACZ,MAAM,EAAE;QAAE;MAAG;KACd,CAAC;IACF,OAAO,IAAI;EACb;EAEA,GAAG,CAAC,GAAkB,EAA4C;IAAA,IAA1C,YAAA,GAAA,SAAA,CAAA,MAAA,QAAA,SAAA,QAAA,SAAA,GAAA,SAAA,MAA2B,IAAI,CAAC,MAAM,CAAC,GAAG;IAChE,KAAK,CAAC,QAAQ,CAAC;MACb,OAAO,EAAE,KAAK,IAAI,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,GAAG,CAAC;MAClD,YAAY;MACZ,MAAM,EAAE;QAAE;MAAG;KACd,CAAC;IACF,OAAO,IAAI;EACb;AACD;AAED,eAAc,SAAU,WAAW,CAA6B,YAAgB,EAAA;EAC9E,OAAO,IAAI,QAAQ,CAAc,YAAY,CAAC;AAChD","sourceRoot":"","sourcesContent":["import { MixedType } from './MixedType';\nexport class DateType extends MixedType {\n    constructor(errorMessage) {\n        super('date');\n        super.pushRule({\n            onValid: value => !/Invalid|NaN/.test(new Date(value).toString()),\n            errorMessage: errorMessage || this.locale.type\n        });\n    }\n    range(min, max, errorMessage = this.locale.range) {\n        super.pushRule({\n            onValid: value => new Date(value) >= new Date(min) && new Date(value) <= new Date(max),\n            errorMessage,\n            params: { min, max }\n        });\n        return this;\n    }\n    min(min, errorMessage = this.locale.min) {\n        super.pushRule({\n            onValid: value => new Date(value) >= new Date(min),\n            errorMessage,\n            params: { min }\n        });\n        return this;\n    }\n    max(max, errorMessage = this.locale.max) {\n        super.pushRule({\n            onValid: value => new Date(value) <= new Date(max),\n            errorMessage,\n            params: { max }\n        });\n        return this;\n    }\n}\nexport default function getDateType(errorMessage) {\n    return new DateType(errorMessage);\n}\n//# sourceMappingURL=DateType.js.map"]},"metadata":{},"sourceType":"module"}