{"ast":null,"code":"// so it doesn't throw if no window or matchMedia\nvar w = typeof window !== 'undefined' ? window : {\n  screen: {},\n  navigator: {}\n};\nvar matchMedia = (w.matchMedia || function () {\n  return {\n    matches: false\n  };\n}).bind(w);\n// passive events test\n// adapted from https://github.com/WICG/EventListenerOptions/blob/gh-pages/explainer.md\nvar passiveOptionAccessed = false;\nvar options = {\n  get passive() {\n    return passiveOptionAccessed = true;\n  }\n};\n// have to set and remove a no-op listener instead of null\n// (which was used previously), because Edge v15 throws an error\n// when providing a null callback.\n// https://github.com/rafgraph/detect-passive-events/pull/3\n// eslint-disable-next-line @typescript-eslint/no-empty-function\nvar noop = function () {};\nw.addEventListener && w.addEventListener('p', noop, options);\nw.removeEventListener && w.removeEventListener('p', noop, false);\nvar supportsPassiveEvents = passiveOptionAccessed;\nvar supportsPointerEvents = ('PointerEvent' in w);\nvar onTouchStartInWindow = ('ontouchstart' in w);\nvar touchEventInWindow = ('TouchEvent' in w);\n// onTouchStartInWindow is the old-old-legacy way to determine a touch device\n// and many websites interpreted it to mean that the device is a touch only phone,\n// so today browsers on a desktop/laptop computer with a touch screen (primary input mouse)\n// have onTouchStartInWindow as false (to prevent from being confused with a\n// touchOnly phone) even though they support the TouchEvents API, so need to check\n// both onTouchStartInWindow and touchEventInWindow for TouchEvent support,\n// however, some browsers (chromium) support the TouchEvents API even when running on\n// a mouse only device (touchEventInWindow true, but onTouchStartInWindow false)\n// so the touchEventInWindow check needs to include an coarse pointer media query\nvar supportsTouchEvents = onTouchStartInWindow || touchEventInWindow && matchMedia('(any-pointer: coarse)').matches;\nvar hasTouch = (w.navigator.maxTouchPoints || 0) > 0 || supportsTouchEvents;\n// userAgent is used as a backup to correct for known device/browser bugs\n// and when the browser doesn't support interaction media queries (pointer and hover)\n// see https://caniuse.com/css-media-interaction\nvar userAgent = w.navigator.userAgent || '';\n// iPads now support a mouse that can hover, however the media query interaction\n// feature results always say iPads only have a coarse pointer that can't hover\n// even when a mouse is connected (anyFine and anyHover are always false),\n// this unfortunately indicates a touch only device but iPads should\n// be classified as a hybrid device, so determine if it is an iPad\n// to indicate it should be treated as a hybrid device with anyHover true\nvar isIPad = matchMedia('(pointer: coarse)').matches &&\n// both iPad and iPhone can \"request desktop site\", which sets the userAgent to Macintosh\n// so need to check both userAgents to determine if it is an iOS device\n// and screen size to separate iPad from iPhone\n/iPad|Macintosh/.test(userAgent) && Math.min(w.screen.width || 0, w.screen.height || 0) >= 768;\nvar hasCoarsePrimaryPointer = (matchMedia('(pointer: coarse)').matches ||\n// if the pointer is not coarse and not fine then the browser doesn't support\n// interaction media queries (see https://caniuse.com/css-media-interaction)\n// so if it has onTouchStartInWindow assume it has a coarse primary pointer\n!matchMedia('(pointer: fine)').matches && onTouchStartInWindow) &&\n// bug in firefox (as of v81) on hybrid windows devices where the interaction media queries\n// always indicate a touch only device (only has a coarse pointer that can't hover)\n// so assume that the primary pointer is not coarse for firefox windows\n!/Windows.*Firefox/.test(userAgent);\nvar hasAnyHoverOrAnyFinePointer = matchMedia('(any-pointer: fine)').matches || matchMedia('(any-hover: hover)').matches ||\n// iPads might have an input device that can hover, so assume it has anyHover\nisIPad ||\n// if no onTouchStartInWindow then the browser is indicating that it is not a touch only device\n// see above note for supportsTouchEvents\n!onTouchStartInWindow;\n// a hybrid device is one that both hasTouch and\n// any input can hover or has a fine pointer, or the primary pointer is not coarse\n// if it's not a hybrid, then if it hasTouch it's touchOnly, otherwise it's mouseOnly\nvar deviceType = hasTouch && (hasAnyHoverOrAnyFinePointer || !hasCoarsePrimaryPointer) ? 'hybrid' : hasTouch ? 'touchOnly' : 'mouseOnly';\nvar primaryInput = deviceType === 'mouseOnly' ? 'mouse' : deviceType === 'touchOnly' ? 'touch' :\n// if the device is a hybrid, then if the primary pointer is coarse\n// assume the primaryInput is touch, otherwise assume it's mouse\nhasCoarsePrimaryPointer ? 'touch' : 'mouse';\nexport { deviceType, primaryInput, supportsPassiveEvents, supportsPointerEvents, supportsTouchEvents };","map":{"version":3,"sources":["../src/index.ts"],"names":[],"mappings":"AAcA;AACA,IAAM,CAAC,GACL,OAAO,MAAM,KAAK,WAAW,GAAG,MAAM,GAAG;EAAE,MAAM,EAAE,CAAA,CAAE;EAAE,SAAS,EAAE,CAAA;AAAE,CAAE;AACxE,IAAM,UAAU,GAAG,CAAC,CAAC,CAAC,UAAU,IAAK,YAAA;EAAM,OAAC;IAAE,OAAO,EAAE;EAAK,CAAE;AAAA,CAAE,EAAE,IAAI,CAAC,CAAC,CAAC;AAEzE;AACA;AACA,IAAI,qBAAqB,GAAG,KAAK;AACjC,IAAM,OAAO,GAAG;EACd,IAAI,OAAO,CAAA,EAAA;IACT,OAAQ,qBAAqB,GAAG,IAAI;EACrC;CACF;AACD;AACA;AACA;AACA;AACA;AACA,IAAM,IAAI,GAAG,SAAA,CAAA,EAAA,CAAA,CAAQ;AACrB,CAAC,CAAC,gBAAgB,IAAI,CAAC,CAAC,gBAAgB,CAAC,GAAG,EAAE,IAAI,EAAE,OAAO,CAAC;AAC5D,CAAC,CAAC,mBAAmB,IAAI,CAAC,CAAC,mBAAmB,CAAC,GAAG,EAAE,IAAI,EAAE,KAAK,CAAC;IAEnD,qBAAqB,GAAY,qBAAA;IAEjC,qBAAqB,IAAY,cAAc,IAAI,CAAA;AAEhE,IAAM,oBAAoB,IAAG,cAAc,IAAI,CAAC;AAChD,IAAM,kBAAkB,IAAG,YAAY,IAAI,CAAC;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IACa,mBAAmB,GAC9B,oBAAoB,IACnB,kBAAkB,IAAI,UAAU,CAAC,uBAAuB,CAAC,CAAC,OAAO;AAEpE,IAAM,QAAQ,GAAG,CAAC,CAAC,CAAC,SAAS,CAAC,cAAc,IAAI,CAAC,IAAI,CAAC,IAAI,mBAAmB;AAE7E;AACA;AACA;AACA,IAAM,SAAS,GAAG,CAAC,CAAC,SAAS,CAAC,SAAS,IAAI,EAAE;AAE7C;AACA;AACA;AACA;AACA;AACA;AACA,IAAM,MAAM,GACV,UAAU,CAAC,mBAAmB,CAAC,CAAC,OAAO;;;;AAIvC,gBAAgB,CAAC,IAAI,CAAC,SAAS,CAAC,IAChC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,MAAM,CAAC,KAAK,IAAI,CAAC,EAAE,CAAC,CAAC,MAAM,CAAC,MAAM,IAAI,CAAC,CAAC,IAAI,GAAG;AAE5D,IAAM,uBAAuB,GAC3B,CAAC,UAAU,CAAC,mBAAmB,CAAC,CAAC,OAAO;;;;AAIrC,CAAC,UAAU,CAAC,iBAAiB,CAAC,CAAC,OAAO,IAAI,oBAAqB;;;;AAIlE,CAAC,kBAAkB,CAAC,IAAI,CAAC,SAAS,CAAC;AAErC,IAAM,2BAA2B,GAC/B,UAAU,CAAC,qBAAqB,CAAC,CAAC,OAAO,IACzC,UAAU,CAAC,oBAAoB,CAAC,CAAC,OAAO;;AAExC,MAAM;;;AAGN,CAAC,oBAAoB;AAEvB;AACA;AACA;IACa,UAAU,GACrB,QAAQ,KAAK,2BAA2B,IAAI,CAAC,uBAAuB,CAAC,GACjE,QAAQ,GACR,QAAQ,GACR,WAAW,GACX,WAAA;IAEO,YAAY,GACvB,UAAU,KAAK,WAAW,GACtB,OAAO,GACP,UAAU,KAAK,WAAW,GAC1B,OAAO;;;AAGT,uBAAuB,GACrB,OAAO,GACP,OAAA","sourcesContent":["interface noWindow {\n  screen: {\n    width?: number;\n    height?: number;\n  };\n  navigator: {\n    maxTouchPoints?: number;\n    userAgent?: string;\n  };\n  addEventListener?: () => void;\n  removeEventListener?: () => void;\n  matchMedia?: () => { matches: boolean };\n}\n\n// so it doesn't throw if no window or matchMedia\nconst w: Window | noWindow =\n  typeof window !== 'undefined' ? window : { screen: {}, navigator: {} };\nconst matchMedia = (w.matchMedia || (() => ({ matches: false }))).bind(w);\n\n// passive events test\n// adapted from https://github.com/WICG/EventListenerOptions/blob/gh-pages/explainer.md\nlet passiveOptionAccessed = false;\nconst options = {\n  get passive() {\n    return (passiveOptionAccessed = true);\n  },\n};\n// have to set and remove a no-op listener instead of null\n// (which was used previously), because Edge v15 throws an error\n// when providing a null callback.\n// https://github.com/rafgraph/detect-passive-events/pull/3\n// eslint-disable-next-line @typescript-eslint/no-empty-function\nconst noop = () => {};\nw.addEventListener && w.addEventListener('p', noop, options);\nw.removeEventListener && w.removeEventListener('p', noop, false);\n\nexport const supportsPassiveEvents: boolean = passiveOptionAccessed;\n\nexport const supportsPointerEvents: boolean = 'PointerEvent' in w;\n\nconst onTouchStartInWindow = 'ontouchstart' in w;\nconst touchEventInWindow = 'TouchEvent' in w;\n// onTouchStartInWindow is the old-old-legacy way to determine a touch device\n// and many websites interpreted it to mean that the device is a touch only phone,\n// so today browsers on a desktop/laptop computer with a touch screen (primary input mouse)\n// have onTouchStartInWindow as false (to prevent from being confused with a\n// touchOnly phone) even though they support the TouchEvents API, so need to check\n// both onTouchStartInWindow and touchEventInWindow for TouchEvent support,\n// however, some browsers (chromium) support the TouchEvents API even when running on\n// a mouse only device (touchEventInWindow true, but onTouchStartInWindow false)\n// so the touchEventInWindow check needs to include an coarse pointer media query\nexport const supportsTouchEvents: boolean =\n  onTouchStartInWindow ||\n  (touchEventInWindow && matchMedia('(any-pointer: coarse)').matches);\n\nconst hasTouch = (w.navigator.maxTouchPoints || 0) > 0 || supportsTouchEvents;\n\n// userAgent is used as a backup to correct for known device/browser bugs\n// and when the browser doesn't support interaction media queries (pointer and hover)\n// see https://caniuse.com/css-media-interaction\nconst userAgent = w.navigator.userAgent || '';\n\n// iPads now support a mouse that can hover, however the media query interaction\n// feature results always say iPads only have a coarse pointer that can't hover\n// even when a mouse is connected (anyFine and anyHover are always false),\n// this unfortunately indicates a touch only device but iPads should\n// be classified as a hybrid device, so determine if it is an iPad\n// to indicate it should be treated as a hybrid device with anyHover true\nconst isIPad =\n  matchMedia('(pointer: coarse)').matches &&\n  // both iPad and iPhone can \"request desktop site\", which sets the userAgent to Macintosh\n  // so need to check both userAgents to determine if it is an iOS device\n  // and screen size to separate iPad from iPhone\n  /iPad|Macintosh/.test(userAgent) &&\n  Math.min(w.screen.width || 0, w.screen.height || 0) >= 768;\n\nconst hasCoarsePrimaryPointer =\n  (matchMedia('(pointer: coarse)').matches ||\n    // if the pointer is not coarse and not fine then the browser doesn't support\n    // interaction media queries (see https://caniuse.com/css-media-interaction)\n    // so if it has onTouchStartInWindow assume it has a coarse primary pointer\n    (!matchMedia('(pointer: fine)').matches && onTouchStartInWindow)) &&\n  // bug in firefox (as of v81) on hybrid windows devices where the interaction media queries\n  // always indicate a touch only device (only has a coarse pointer that can't hover)\n  // so assume that the primary pointer is not coarse for firefox windows\n  !/Windows.*Firefox/.test(userAgent);\n\nconst hasAnyHoverOrAnyFinePointer =\n  matchMedia('(any-pointer: fine)').matches ||\n  matchMedia('(any-hover: hover)').matches ||\n  // iPads might have an input device that can hover, so assume it has anyHover\n  isIPad ||\n  // if no onTouchStartInWindow then the browser is indicating that it is not a touch only device\n  // see above note for supportsTouchEvents\n  !onTouchStartInWindow;\n\n// a hybrid device is one that both hasTouch and\n// any input can hover or has a fine pointer, or the primary pointer is not coarse\n// if it's not a hybrid, then if it hasTouch it's touchOnly, otherwise it's mouseOnly\nexport const deviceType: 'mouseOnly' | 'touchOnly' | 'hybrid' =\n  hasTouch && (hasAnyHoverOrAnyFinePointer || !hasCoarsePrimaryPointer)\n    ? 'hybrid'\n    : hasTouch\n    ? 'touchOnly'\n    : 'mouseOnly';\n\nexport const primaryInput: 'mouse' | 'touch' =\n  deviceType === 'mouseOnly'\n    ? 'mouse'\n    : deviceType === 'touchOnly'\n    ? 'touch'\n    : // if the device is a hybrid, then if the primary pointer is coarse\n    // assume the primaryInput is touch, otherwise assume it's mouse\n    hasCoarsePrimaryPointer\n    ? 'touch'\n    : 'mouse';\n"]},"metadata":{},"sourceType":"module"}