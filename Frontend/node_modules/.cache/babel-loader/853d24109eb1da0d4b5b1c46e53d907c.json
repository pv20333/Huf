{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nvar data = require('./data.cjs.js');\nvar cssVar = require('./utils/css-var.cjs.js');\nvar animation = require('@motionone/animation');\nvar utils = require('@motionone/utils');\nvar transforms = require('./utils/transforms.cjs.js');\nvar easing = require('./utils/easing.cjs.js');\nvar featureDetection = require('./utils/feature-detection.cjs.js');\nvar keyframes = require('./utils/keyframes.cjs.js');\nvar style = require('./style.cjs.js');\nvar getStyleName = require('./utils/get-style-name.cjs.js');\nvar stopAnimation = require('./utils/stop-animation.cjs.js');\nfunction getDevToolsRecord() {\n  return window.__MOTION_DEV_TOOLS_RECORD;\n}\nfunction animateStyle(element, key, keyframesDefinition) {\n  let options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n  const record = getDevToolsRecord();\n  const isRecording = options.record !== false && record;\n  let animation$1;\n  let {\n    duration = utils.defaults.duration,\n    delay = utils.defaults.delay,\n    endDelay = utils.defaults.endDelay,\n    repeat = utils.defaults.repeat,\n    easing: easing$1 = utils.defaults.easing,\n    direction,\n    offset,\n    allowWebkitAcceleration = false\n  } = options;\n  const data$1 = data.getAnimationData(element);\n  let canAnimateNatively = featureDetection.supports.waapi();\n  const valueIsTransform = transforms.isTransform(key);\n  /**\n   * If this is an individual transform, we need to map its\n   * key to a CSS variable and update the element's transform style\n   */\n  valueIsTransform && transforms.addTransformToElement(element, key);\n  const name = getStyleName.getStyleName(key);\n  const motionValue = data.getMotionValue(data$1.values, name);\n  /**\n   * Get definition of value, this will be used to convert numerical\n   * keyframes into the default value type.\n   */\n  const definition = transforms.transformDefinitions.get(name);\n  /**\n   * Stop the current animation, if any. Because this will trigger\n   * commitStyles (DOM writes) and we might later trigger DOM reads,\n   * this is fired now and we return a factory function to create\n   * the actual animation that can get called in batch,\n   */\n  stopAnimation.stopAnimation(motionValue.animation, !(utils.isEasingGenerator(easing$1) && motionValue.generator) && options.record !== false);\n  /**\n   * Batchable factory function containing all DOM reads.\n   */\n  return () => {\n    const readInitialValue = () => {\n      var _a, _b;\n      return (_b = (_a = style.style.get(element, name)) !== null && _a !== void 0 ? _a : definition === null || definition === void 0 ? void 0 : definition.initialValue) !== null && _b !== void 0 ? _b : 0;\n    };\n    /**\n     * Replace null values with the previous keyframe value, or read\n     * it from the DOM if it's the first keyframe.\n     */\n    let keyframes$1 = keyframes.hydrateKeyframes(keyframes.keyframesList(keyframesDefinition), readInitialValue);\n    if (utils.isEasingGenerator(easing$1)) {\n      const custom = easing$1.createAnimation(keyframes$1, readInitialValue, valueIsTransform, name, motionValue);\n      easing$1 = custom.easing;\n      if (custom.keyframes !== undefined) keyframes$1 = custom.keyframes;\n      if (custom.duration !== undefined) duration = custom.duration;\n    }\n    /**\n     * If this is a CSS variable we need to register it with the browser\n     * before it can be animated natively. We also set it with setProperty\n     * rather than directly onto the element.style object.\n     */\n    if (cssVar.isCssVar(name)) {\n      if (featureDetection.supports.cssRegisterProperty()) {\n        cssVar.registerCssVariable(name);\n      } else {\n        canAnimateNatively = false;\n      }\n    }\n    /**\n     * If we can animate this value with WAAPI, do so. Currently this only\n     * feature detects CSS.registerProperty but could check WAAPI too.\n     */\n    if (canAnimateNatively) {\n      /**\n       * Convert numbers to default value types. Currently this only supports\n       * transforms but it could also support other value types.\n       */\n      if (definition) {\n        keyframes$1 = keyframes$1.map(value => utils.isNumber(value) ? definition.toDefaultUnit(value) : value);\n      }\n      /**\n       * If this browser doesn't support partial/implicit keyframes we need to\n       * explicitly provide one.\n       */\n      if (keyframes$1.length === 1 && (!featureDetection.supports.partialKeyframes() || isRecording)) {\n        keyframes$1.unshift(readInitialValue());\n      }\n      const animationOptions = {\n        delay: utils.time.ms(delay),\n        duration: utils.time.ms(duration),\n        endDelay: utils.time.ms(endDelay),\n        easing: !utils.isEasingList(easing$1) ? easing.convertEasing(easing$1) : undefined,\n        direction,\n        iterations: repeat + 1,\n        fill: \"both\"\n      };\n      animation$1 = element.animate({\n        [name]: keyframes$1,\n        offset,\n        easing: utils.isEasingList(easing$1) ? easing$1.map(easing.convertEasing) : undefined\n      }, animationOptions);\n      /**\n       * Polyfill finished Promise in browsers that don't support it\n       */\n      if (!animation$1.finished) {\n        animation$1.finished = new Promise((resolve, reject) => {\n          animation$1.onfinish = resolve;\n          animation$1.oncancel = reject;\n        });\n      }\n      const target = keyframes$1[keyframes$1.length - 1];\n      animation$1.finished.then(() => {\n        // Apply styles to target\n        style.style.set(element, name, target);\n        // Ensure fill modes don't persist\n        animation$1.cancel();\n      }).catch(utils.noop);\n      /**\n       * This forces Webkit to run animations on the main thread by exploiting\n       * this condition:\n       * https://trac.webkit.org/browser/webkit/trunk/Source/WebCore/platform/graphics/ca/GraphicsLayerCA.cpp?rev=281238#L1099\n       *\n       * This fixes Webkit's timing bugs, like accelerated animations falling\n       * out of sync with main thread animations and massive delays in starting\n       * accelerated animations in WKWebView.\n       */\n      if (!allowWebkitAcceleration) animation$1.playbackRate = 1.000001;\n      /**\n       * If we can't animate the value natively then we can fallback to the numbers-only\n       * polyfill for transforms.\n       */\n    } else if (valueIsTransform) {\n      /**\n       * If any keyframe is a string (because we measured it from the DOM), we need to convert\n       * it into a number before passing to the Animation polyfill.\n       */\n      keyframes$1 = keyframes$1.map(value => typeof value === \"string\" ? parseFloat(value) : value);\n      /**\n       * If we only have a single keyframe, we need to create an initial keyframe by reading\n       * the current value from the DOM.\n       */\n      if (keyframes$1.length === 1) {\n        keyframes$1.unshift(parseFloat(readInitialValue()));\n      }\n      const render = latest => {\n        if (definition) latest = definition.toDefaultUnit(latest);\n        style.style.set(element, name, latest);\n      };\n      animation$1 = new animation.Animation(render, keyframes$1, Object.assign(Object.assign({}, options), {\n        duration,\n        easing: easing$1\n      }));\n    } else {\n      const target = keyframes$1[keyframes$1.length - 1];\n      style.style.set(element, name, definition && utils.isNumber(target) ? definition.toDefaultUnit(target) : target);\n    }\n    if (isRecording) {\n      record(element, key, keyframes$1, {\n        duration,\n        delay: delay,\n        easing: easing$1,\n        repeat,\n        offset\n      }, \"motion-one\");\n    }\n    motionValue.setAnimation(animation$1);\n    return animation$1;\n  };\n}\nexports.animateStyle = animateStyle;","map":{"version":3,"names":["Object","defineProperty","exports","value","data","require","cssVar","animation","utils","transforms","easing","featureDetection","keyframes","style","getStyleName","stopAnimation","getDevToolsRecord","window","__MOTION_DEV_TOOLS_RECORD","animateStyle","element","key","keyframesDefinition","options","arguments","length","undefined","record","isRecording","animation$1","duration","defaults","delay","endDelay","repeat","easing$1","direction","offset","allowWebkitAcceleration","data$1","getAnimationData","canAnimateNatively","supports","waapi","valueIsTransform","isTransform","addTransformToElement","name","motionValue","getMotionValue","values","definition","transformDefinitions","get","isEasingGenerator","generator","readInitialValue","_a","_b","initialValue","keyframes$1","hydrateKeyframes","keyframesList","custom","createAnimation","isCssVar","cssRegisterProperty","registerCssVariable","map","isNumber","toDefaultUnit","partialKeyframes","unshift","animationOptions","time","ms","isEasingList","convertEasing","iterations","fill","animate","finished","Promise","resolve","reject","onfinish","oncancel","target","then","set","cancel","catch","noop","playbackRate","parseFloat","render","latest","Animation","assign","setAnimation"],"sources":["C:/Users/tiago/OneDrive/Documentos/GitHub/Huf/Frontend/node_modules/@motionone/dom/dist/animate/animate-style.cjs.js"],"sourcesContent":["'use strict';\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\nvar data = require('./data.cjs.js');\nvar cssVar = require('./utils/css-var.cjs.js');\nvar animation = require('@motionone/animation');\nvar utils = require('@motionone/utils');\nvar transforms = require('./utils/transforms.cjs.js');\nvar easing = require('./utils/easing.cjs.js');\nvar featureDetection = require('./utils/feature-detection.cjs.js');\nvar keyframes = require('./utils/keyframes.cjs.js');\nvar style = require('./style.cjs.js');\nvar getStyleName = require('./utils/get-style-name.cjs.js');\nvar stopAnimation = require('./utils/stop-animation.cjs.js');\n\nfunction getDevToolsRecord() {\n    return window.__MOTION_DEV_TOOLS_RECORD;\n}\nfunction animateStyle(element, key, keyframesDefinition, options = {}) {\n    const record = getDevToolsRecord();\n    const isRecording = options.record !== false && record;\n    let animation$1;\n    let { duration = utils.defaults.duration, delay = utils.defaults.delay, endDelay = utils.defaults.endDelay, repeat = utils.defaults.repeat, easing: easing$1 = utils.defaults.easing, direction, offset, allowWebkitAcceleration = false, } = options;\n    const data$1 = data.getAnimationData(element);\n    let canAnimateNatively = featureDetection.supports.waapi();\n    const valueIsTransform = transforms.isTransform(key);\n    /**\n     * If this is an individual transform, we need to map its\n     * key to a CSS variable and update the element's transform style\n     */\n    valueIsTransform && transforms.addTransformToElement(element, key);\n    const name = getStyleName.getStyleName(key);\n    const motionValue = data.getMotionValue(data$1.values, name);\n    /**\n     * Get definition of value, this will be used to convert numerical\n     * keyframes into the default value type.\n     */\n    const definition = transforms.transformDefinitions.get(name);\n    /**\n     * Stop the current animation, if any. Because this will trigger\n     * commitStyles (DOM writes) and we might later trigger DOM reads,\n     * this is fired now and we return a factory function to create\n     * the actual animation that can get called in batch,\n     */\n    stopAnimation.stopAnimation(motionValue.animation, !(utils.isEasingGenerator(easing$1) && motionValue.generator) &&\n        options.record !== false);\n    /**\n     * Batchable factory function containing all DOM reads.\n     */\n    return () => {\n        const readInitialValue = () => { var _a, _b; return (_b = (_a = style.style.get(element, name)) !== null && _a !== void 0 ? _a : definition === null || definition === void 0 ? void 0 : definition.initialValue) !== null && _b !== void 0 ? _b : 0; };\n        /**\n         * Replace null values with the previous keyframe value, or read\n         * it from the DOM if it's the first keyframe.\n         */\n        let keyframes$1 = keyframes.hydrateKeyframes(keyframes.keyframesList(keyframesDefinition), readInitialValue);\n        if (utils.isEasingGenerator(easing$1)) {\n            const custom = easing$1.createAnimation(keyframes$1, readInitialValue, valueIsTransform, name, motionValue);\n            easing$1 = custom.easing;\n            if (custom.keyframes !== undefined)\n                keyframes$1 = custom.keyframes;\n            if (custom.duration !== undefined)\n                duration = custom.duration;\n        }\n        /**\n         * If this is a CSS variable we need to register it with the browser\n         * before it can be animated natively. We also set it with setProperty\n         * rather than directly onto the element.style object.\n         */\n        if (cssVar.isCssVar(name)) {\n            if (featureDetection.supports.cssRegisterProperty()) {\n                cssVar.registerCssVariable(name);\n            }\n            else {\n                canAnimateNatively = false;\n            }\n        }\n        /**\n         * If we can animate this value with WAAPI, do so. Currently this only\n         * feature detects CSS.registerProperty but could check WAAPI too.\n         */\n        if (canAnimateNatively) {\n            /**\n             * Convert numbers to default value types. Currently this only supports\n             * transforms but it could also support other value types.\n             */\n            if (definition) {\n                keyframes$1 = keyframes$1.map((value) => utils.isNumber(value) ? definition.toDefaultUnit(value) : value);\n            }\n            /**\n             * If this browser doesn't support partial/implicit keyframes we need to\n             * explicitly provide one.\n             */\n            if (keyframes$1.length === 1 &&\n                (!featureDetection.supports.partialKeyframes() || isRecording)) {\n                keyframes$1.unshift(readInitialValue());\n            }\n            const animationOptions = {\n                delay: utils.time.ms(delay),\n                duration: utils.time.ms(duration),\n                endDelay: utils.time.ms(endDelay),\n                easing: !utils.isEasingList(easing$1) ? easing.convertEasing(easing$1) : undefined,\n                direction,\n                iterations: repeat + 1,\n                fill: \"both\",\n            };\n            animation$1 = element.animate({\n                [name]: keyframes$1,\n                offset,\n                easing: utils.isEasingList(easing$1) ? easing$1.map(easing.convertEasing) : undefined,\n            }, animationOptions);\n            /**\n             * Polyfill finished Promise in browsers that don't support it\n             */\n            if (!animation$1.finished) {\n                animation$1.finished = new Promise((resolve, reject) => {\n                    animation$1.onfinish = resolve;\n                    animation$1.oncancel = reject;\n                });\n            }\n            const target = keyframes$1[keyframes$1.length - 1];\n            animation$1.finished\n                .then(() => {\n                // Apply styles to target\n                style.style.set(element, name, target);\n                // Ensure fill modes don't persist\n                animation$1.cancel();\n            })\n                .catch(utils.noop);\n            /**\n             * This forces Webkit to run animations on the main thread by exploiting\n             * this condition:\n             * https://trac.webkit.org/browser/webkit/trunk/Source/WebCore/platform/graphics/ca/GraphicsLayerCA.cpp?rev=281238#L1099\n             *\n             * This fixes Webkit's timing bugs, like accelerated animations falling\n             * out of sync with main thread animations and massive delays in starting\n             * accelerated animations in WKWebView.\n             */\n            if (!allowWebkitAcceleration)\n                animation$1.playbackRate = 1.000001;\n            /**\n             * If we can't animate the value natively then we can fallback to the numbers-only\n             * polyfill for transforms.\n             */\n        }\n        else if (valueIsTransform) {\n            /**\n             * If any keyframe is a string (because we measured it from the DOM), we need to convert\n             * it into a number before passing to the Animation polyfill.\n             */\n            keyframes$1 = keyframes$1.map((value) => typeof value === \"string\" ? parseFloat(value) : value);\n            /**\n             * If we only have a single keyframe, we need to create an initial keyframe by reading\n             * the current value from the DOM.\n             */\n            if (keyframes$1.length === 1) {\n                keyframes$1.unshift(parseFloat(readInitialValue()));\n            }\n            const render = (latest) => {\n                if (definition)\n                    latest = definition.toDefaultUnit(latest);\n                style.style.set(element, name, latest);\n            };\n            animation$1 = new animation.Animation(render, keyframes$1, Object.assign(Object.assign({}, options), { duration,\n                easing: easing$1 }));\n        }\n        else {\n            const target = keyframes$1[keyframes$1.length - 1];\n            style.style.set(element, name, definition && utils.isNumber(target)\n                ? definition.toDefaultUnit(target)\n                : target);\n        }\n        if (isRecording) {\n            record(element, key, keyframes$1, {\n                duration,\n                delay: delay,\n                easing: easing$1,\n                repeat,\n                offset,\n            }, \"motion-one\");\n        }\n        motionValue.setAnimation(animation$1);\n        return animation$1;\n    };\n}\n\nexports.animateStyle = animateStyle;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}