{"ast":null,"code":"import { MixedType } from './MixedType';\nfunction toNumber(value) {\n  return +value;\n}\nexport class NumberType extends MixedType {\n  constructor(errorMessage) {\n    super('number');\n    super.pushRule({\n      onValid: value => /^-?(?:\\d+|\\d{1,3}(?:,\\d{3})+)(?:\\.\\d+)?$/.test(value + ''),\n      errorMessage: errorMessage || this.locale.type\n    });\n  }\n  isInteger() {\n    let errorMessage = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.locale.isInteger;\n    super.pushRule({\n      onValid: value => /^-?\\d+$/.test(value + ''),\n      errorMessage\n    });\n    return this;\n  }\n  pattern(regexp) {\n    let errorMessage = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.locale.pattern;\n    super.pushRule({\n      onValid: value => regexp.test(value + ''),\n      errorMessage,\n      params: {\n        regexp\n      }\n    });\n    return this;\n  }\n  isOneOf(values) {\n    let errorMessage = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.locale.isOneOf;\n    super.pushRule({\n      onValid: value => values.includes(toNumber(value)),\n      errorMessage,\n      params: {\n        values\n      }\n    });\n    return this;\n  }\n  range(min, max) {\n    let errorMessage = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : this.locale.range;\n    super.pushRule({\n      onValid: value => toNumber(value) >= min && toNumber(value) <= max,\n      errorMessage,\n      params: {\n        min,\n        max\n      }\n    });\n    return this;\n  }\n  min(min) {\n    let errorMessage = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.locale.min;\n    super.pushRule({\n      onValid: value => toNumber(value) >= min,\n      errorMessage,\n      params: {\n        min\n      }\n    });\n    return this;\n  }\n  max(max) {\n    let errorMessage = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.locale.max;\n    super.pushRule({\n      onValid: value => toNumber(value) <= max,\n      errorMessage,\n      params: {\n        max\n      }\n    });\n    return this;\n  }\n}\nexport default function getNumberType(errorMessage) {\n  return new NumberType(errorMessage);\n}","map":{"version":3,"sources":["../src/NumberType.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import { MixedType } from './MixedType';\nfunction toNumber(value) {\n    return +value;\n}\nexport class NumberType extends MixedType {\n    constructor(errorMessage) {\n        super('number');\n        super.pushRule({\n            onValid: value => /^-?(?:\\d+|\\d{1,3}(?:,\\d{3})+)(?:\\.\\d+)?$/.test(value + ''),\n            errorMessage: errorMessage || this.locale.type\n        });\n    }\n    isInteger(errorMessage = this.locale.isInteger) {\n        super.pushRule({\n            onValid: value => /^-?\\d+$/.test(value + ''),\n            errorMessage\n        });\n        return this;\n    }\n    pattern(regexp, errorMessage = this.locale.pattern) {\n        super.pushRule({\n            onValid: value => regexp.test(value + ''),\n            errorMessage,\n            params: { regexp }\n        });\n        return this;\n    }\n    isOneOf(values, errorMessage = this.locale.isOneOf) {\n        super.pushRule({\n            onValid: value => values.includes(toNumber(value)),\n            errorMessage,\n            params: { values }\n        });\n        return this;\n    }\n    range(min, max, errorMessage = this.locale.range) {\n        super.pushRule({\n            onValid: value => toNumber(value) >= min && toNumber(value) <= max,\n            errorMessage,\n            params: { min, max }\n        });\n        return this;\n    }\n    min(min, errorMessage = this.locale.min) {\n        super.pushRule({\n            onValid: value => toNumber(value) >= min,\n            errorMessage,\n            params: { min }\n        });\n        return this;\n    }\n    max(max, errorMessage = this.locale.max) {\n        super.pushRule({\n            onValid: value => toNumber(value) <= max,\n            errorMessage,\n            params: { max }\n        });\n        return this;\n    }\n}\nexport default function getNumberType(errorMessage) {\n    return new NumberType(errorMessage);\n}\n//# sourceMappingURL=NumberType.js.map"]},"metadata":{},"sourceType":"module"}