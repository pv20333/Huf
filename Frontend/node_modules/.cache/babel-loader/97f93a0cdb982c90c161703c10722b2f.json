{"ast":null,"code":"// src/useSet.ts\nimport { useCallback, useMemo, useState } from \"react\";\nfunction useSet(iterable) {\n  const [set, setSet] = useState(() => new Set(iterable));\n  const add = useCallback(function () {\n    for (var _len = arguments.length, values = new Array(_len), _key = 0; _key < _len; _key++) {\n      values[_key] = arguments[_key];\n    }\n    setSet(prev => {\n      const copy = new Set(prev);\n      for (const value of values) {\n        copy.add(value);\n      }\n      return copy;\n    });\n  }, []);\n  const deleteValues = useCallback(function () {\n    for (var _len2 = arguments.length, values = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n      values[_key2] = arguments[_key2];\n    }\n    setSet(prev => {\n      const copy = new Set(prev);\n      for (const value of values) {\n        copy.delete(value);\n      }\n      return copy;\n    });\n  }, []);\n  const toggle = useCallback(value => {\n    setSet(prev => {\n      const copy = new Set(prev);\n      if (!copy.has(value)) {\n        copy.add(value);\n      } else {\n        copy.delete(value);\n      }\n      return copy;\n    });\n  }, []);\n  const clear = useCallback(() => {\n    setSet( /* @__PURE__ */new Set());\n  }, []);\n  const sync = useCallback(values => {\n    setSet(new Set(values));\n  }, []);\n  return useMemo(() => {\n    return {\n      size: set.size,\n      has: value => set.has(value),\n      add,\n      delete: deleteValues,\n      clear,\n      sync,\n      toArray: () => Array.from(set),\n      toggle\n    };\n  }, [set, add, deleteValues, clear, sync, toggle]);\n}\nexport { useSet };","map":{"version":3,"names":["useCallback","useMemo","useState","useSet","iterable","set","setSet","Set","add","_len","arguments","length","values","Array","_key","prev","copy","value","deleteValues","_len2","_key2","delete","toggle","has","clear","sync","size","toArray","from"],"sources":["C:/Users/tiago/OneDrive/Documentos/GitHub/Huf/Frontend/node_modules/react-use-set/dist/index.mjs"],"sourcesContent":["// src/useSet.ts\nimport { useCallback, useMemo, useState } from \"react\";\nfunction useSet(iterable) {\n  const [set, setSet] = useState(() => new Set(iterable));\n  const add = useCallback((...values) => {\n    setSet((prev) => {\n      const copy = new Set(prev);\n      for (const value of values) {\n        copy.add(value);\n      }\n      return copy;\n    });\n  }, []);\n  const deleteValues = useCallback((...values) => {\n    setSet((prev) => {\n      const copy = new Set(prev);\n      for (const value of values) {\n        copy.delete(value);\n      }\n      return copy;\n    });\n  }, []);\n  const toggle = useCallback((value) => {\n    setSet((prev) => {\n      const copy = new Set(prev);\n      if (!copy.has(value)) {\n        copy.add(value);\n      } else {\n        copy.delete(value);\n      }\n      return copy;\n    });\n  }, []);\n  const clear = useCallback(() => {\n    setSet(/* @__PURE__ */ new Set());\n  }, []);\n  const sync = useCallback((values) => {\n    setSet(new Set(values));\n  }, []);\n  return useMemo(() => {\n    return {\n      size: set.size,\n      has: (value) => set.has(value),\n      add,\n      delete: deleteValues,\n      clear,\n      sync,\n      toArray: () => Array.from(set),\n      toggle\n    };\n  }, [set, add, deleteValues, clear, sync, toggle]);\n}\nexport {\n  useSet\n};\n"],"mappings":"AAAA;AACA,SAASA,WAAW,EAAEC,OAAO,EAAEC,QAAQ,QAAQ,OAAO;AACtD,SAASC,MAAMA,CAACC,QAAQ,EAAE;EACxB,MAAM,CAACC,GAAG,EAAEC,MAAM,CAAC,GAAGJ,QAAQ,CAAC,MAAM,IAAIK,GAAG,CAACH,QAAQ,CAAC,CAAC;EACvD,MAAMI,GAAG,GAAGR,WAAW,CAAC,YAAe;IAAA,SAAAS,IAAA,GAAAC,SAAA,CAAAC,MAAA,EAAXC,MAAM,OAAAC,KAAA,CAAAJ,IAAA,GAAAK,IAAA,MAAAA,IAAA,GAAAL,IAAA,EAAAK,IAAA;MAANF,MAAM,CAAAE,IAAA,IAAAJ,SAAA,CAAAI,IAAA;IAAA;IAChCR,MAAM,CAAES,IAAI,IAAK;MACf,MAAMC,IAAI,GAAG,IAAIT,GAAG,CAACQ,IAAI,CAAC;MAC1B,KAAK,MAAME,KAAK,IAAIL,MAAM,EAAE;QAC1BI,IAAI,CAACR,GAAG,CAACS,KAAK,CAAC;MACjB;MACA,OAAOD,IAAI;IACb,CAAC,CAAC;EACJ,CAAC,EAAE,EAAE,CAAC;EACN,MAAME,YAAY,GAAGlB,WAAW,CAAC,YAAe;IAAA,SAAAmB,KAAA,GAAAT,SAAA,CAAAC,MAAA,EAAXC,MAAM,OAAAC,KAAA,CAAAM,KAAA,GAAAC,KAAA,MAAAA,KAAA,GAAAD,KAAA,EAAAC,KAAA;MAANR,MAAM,CAAAQ,KAAA,IAAAV,SAAA,CAAAU,KAAA;IAAA;IACzCd,MAAM,CAAES,IAAI,IAAK;MACf,MAAMC,IAAI,GAAG,IAAIT,GAAG,CAACQ,IAAI,CAAC;MAC1B,KAAK,MAAME,KAAK,IAAIL,MAAM,EAAE;QAC1BI,IAAI,CAACK,MAAM,CAACJ,KAAK,CAAC;MACpB;MACA,OAAOD,IAAI;IACb,CAAC,CAAC;EACJ,CAAC,EAAE,EAAE,CAAC;EACN,MAAMM,MAAM,GAAGtB,WAAW,CAAEiB,KAAK,IAAK;IACpCX,MAAM,CAAES,IAAI,IAAK;MACf,MAAMC,IAAI,GAAG,IAAIT,GAAG,CAACQ,IAAI,CAAC;MAC1B,IAAI,CAACC,IAAI,CAACO,GAAG,CAACN,KAAK,CAAC,EAAE;QACpBD,IAAI,CAACR,GAAG,CAACS,KAAK,CAAC;MACjB,CAAC,MAAM;QACLD,IAAI,CAACK,MAAM,CAACJ,KAAK,CAAC;MACpB;MACA,OAAOD,IAAI;IACb,CAAC,CAAC;EACJ,CAAC,EAAE,EAAE,CAAC;EACN,MAAMQ,KAAK,GAAGxB,WAAW,CAAC,MAAM;IAC9BM,MAAM,EAAC,eAAgB,IAAIC,GAAG,EAAE,CAAC;EACnC,CAAC,EAAE,EAAE,CAAC;EACN,MAAMkB,IAAI,GAAGzB,WAAW,CAAEY,MAAM,IAAK;IACnCN,MAAM,CAAC,IAAIC,GAAG,CAACK,MAAM,CAAC,CAAC;EACzB,CAAC,EAAE,EAAE,CAAC;EACN,OAAOX,OAAO,CAAC,MAAM;IACnB,OAAO;MACLyB,IAAI,EAAErB,GAAG,CAACqB,IAAI;MACdH,GAAG,EAAGN,KAAK,IAAKZ,GAAG,CAACkB,GAAG,CAACN,KAAK,CAAC;MAC9BT,GAAG;MACHa,MAAM,EAAEH,YAAY;MACpBM,KAAK;MACLC,IAAI;MACJE,OAAO,EAAEA,CAAA,KAAMd,KAAK,CAACe,IAAI,CAACvB,GAAG,CAAC;MAC9BiB;IACF,CAAC;EACH,CAAC,EAAE,CAACjB,GAAG,EAAEG,GAAG,EAAEU,YAAY,EAAEM,KAAK,EAAEC,IAAI,EAAEH,MAAM,CAAC,CAAC;AACnD;AACA,SACEnB,MAAM"},"metadata":{},"sourceType":"module"}