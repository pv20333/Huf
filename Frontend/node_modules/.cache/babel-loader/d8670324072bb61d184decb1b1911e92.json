{"ast":null,"code":"import formatErrorMessage from './formatErrorMessage';\n/**\n * Create a data asynchronous validator\n * @param data\n */\nexport function createValidatorAsync(data, name) {\n  function check(errorMessage) {\n    return checkResult => {\n      if (checkResult === false) {\n        return {\n          hasError: true,\n          errorMessage\n        };\n      } else if (typeof checkResult === 'object' && (checkResult.hasError || checkResult.array)) {\n        return checkResult;\n      }\n      return null;\n    };\n  }\n  return (value, rules) => {\n    const promises = rules.map(rule => {\n      const {\n        onValid,\n        errorMessage,\n        params\n      } = rule;\n      return Promise.resolve(onValid(value, data, name)).then(check(formatErrorMessage(errorMessage, {\n        ...params,\n        name: Array.isArray(name) ? name.join('.') : name\n      })));\n    });\n    return Promise.all(promises).then(results => results.find(item => item && (item === null || item === void 0 ? void 0 : item.hasError)));\n  };\n}\nexport default createValidatorAsync;","map":{"version":3,"sources":["../../src/utils/createValidatorAsync.ts"],"names":[],"mappings":"AACA,OAAO,kBAAkB,MAAM,sBAAsB;AAErD;;;AAGG;AACH,OAAM,SAAU,oBAAoB,CAAU,IAAQ,EAAE,IAAwB,EAAA;EAC9E,SAAS,KAAK,CAAC,YAAyB,EAAA;IACtC,OAAQ,WAAqC,IAA2B;MACtE,IAAI,WAAW,KAAK,KAAK,EAAE;QACzB,OAAO;UAAE,QAAQ,EAAE,IAAI;UAAE;QAAY,CAAE;OACxC,MAAM,IAAI,OAAO,WAAW,KAAK,QAAQ,KAAK,WAAW,CAAC,QAAQ,IAAI,WAAW,CAAC,KAAK,CAAC,EAAE;QACzF,OAAO,WAAW;MACnB;MACD,OAAO,IAAI;IACb,CAAC;EACH;EAEA,OAAO,CAAC,KAAQ,EAAE,KAA0B,KAAI;IAC9C,MAAM,QAAQ,GAAG,KAAK,CAAC,GAAG,CAAC,IAAI,IAAG;MAChC,MAAM;QAAE,OAAO;QAAE,YAAY;QAAE;MAAM,CAAE,GAAG,IAAI;MAC9C,OAAO,OAAO,CAAC,OAAO,CAAC,OAAO,CAAC,KAAK,EAAE,IAAI,EAAE,IAAI,CAAC,CAAC,CAAC,IAAI,CACrD,KAAK,CACH,kBAAkB,CAAI,YAAY,EAAE;QAClC,GAAG,MAAM;QACT,IAAI,EAAE,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,GAAG,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,GAAG;OAC9C,CAAC,CACH,CACF;IACH,CAAC,CAAC;IAEF,OAAO,OAAO,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC,IAAI,CAAC,OAAO,IACvC,OAAO,CAAC,IAAI,CAAE,IAA2B,IAAK,IAAI,KAAI,IAAI,KAAA,IAAA,IAAJ,IAAI,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAJ,IAAI,CAAE,QAAQ,CAAA,CAAC,CACtE;EACH,CAAC;AACH;AAEA,eAAe,oBAAoB","sourceRoot":"","sourcesContent":["import formatErrorMessage from './formatErrorMessage';\n/**\n * Create a data asynchronous validator\n * @param data\n */\nexport function createValidatorAsync(data, name) {\n    function check(errorMessage) {\n        return (checkResult) => {\n            if (checkResult === false) {\n                return { hasError: true, errorMessage };\n            }\n            else if (typeof checkResult === 'object' && (checkResult.hasError || checkResult.array)) {\n                return checkResult;\n            }\n            return null;\n        };\n    }\n    return (value, rules) => {\n        const promises = rules.map(rule => {\n            const { onValid, errorMessage, params } = rule;\n            return Promise.resolve(onValid(value, data, name)).then(check(formatErrorMessage(errorMessage, {\n                ...params,\n                name: Array.isArray(name) ? name.join('.') : name\n            })));\n        });\n        return Promise.all(promises).then(results => results.find((item) => item && (item === null || item === void 0 ? void 0 : item.hasError)));\n    };\n}\nexport default createValidatorAsync;\n//# sourceMappingURL=createValidatorAsync.js.map"]},"metadata":{},"sourceType":"module"}