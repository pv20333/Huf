{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\tiago\\\\OneDrive\\\\Documentos\\\\GitHub\\\\Huf\\\\Frontend\\\\src\\\\view\\\\pages\\\\login\\\\index.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { BrowserRouter as Router, Route, Switch, Redirect } from 'react-router-dom';\nimport LoginComponent from './login';\nimport { isExpiredBoolean } from './token';\nimport Dashboard from '../../home/index'; // Importe o componente de dashboard que você deseja redirecionar após o login\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst App = () => {\n  _s();\n  const [isLoggedIn, setIsLoggedIn] = useState(false); // Aqui, você precisa usar o array destruturing para obter o estado e a função para atualizá-lo\n\n  useEffect(() => {\n    console.log(isExpiredBoolean());\n    //setIsLoggedIn(isExpiredBoolean());\n  }, []);\n  return /*#__PURE__*/_jsxDEV(Router, {\n    children: /*#__PURE__*/_jsxDEV(Switch, {\n      children: [/*#__PURE__*/_jsxDEV(Route, {\n        exact: true,\n        path: \"/pages/login\",\n        children: !isLoggedIn ? /*#__PURE__*/_jsxDEV(LoginComponent, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 19,\n          columnNumber: 28\n        }, this) : /*#__PURE__*/_jsxDEV(Redirect, {\n          to: \"/\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 19,\n          columnNumber: 49\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 18,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Route, {\n        exact: true,\n        path: \"/\",\n        children: isLoggedIn ? /*#__PURE__*/_jsxDEV(Dashboard, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 22,\n          columnNumber: 27\n        }, this) : /*#__PURE__*/_jsxDEV(Redirect, {\n          to: \"/pages/login\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 22,\n          columnNumber: 43\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 21,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Redirect, {\n        to: \"/pages/login\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 24,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 17,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 16,\n    columnNumber: 7\n  }, this);\n};\n_s(App, \"fKLMlyFH2GMrhNeUDpp+0z1yiCo=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useEffect","useState","BrowserRouter","Router","Route","Switch","Redirect","LoginComponent","isExpiredBoolean","Dashboard","jsxDEV","_jsxDEV","App","_s","isLoggedIn","setIsLoggedIn","console","log","children","exact","path","fileName","_jsxFileName","lineNumber","columnNumber","to","_c","$RefreshReg$"],"sources":["C:/Users/tiago/OneDrive/Documentos/GitHub/Huf/Frontend/src/view/pages/login/index.jsx"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport { BrowserRouter as Router, Route, Switch, Redirect } from 'react-router-dom';\r\nimport LoginComponent from './login';\r\nimport {isExpiredBoolean} from './token';\r\nimport Dashboard from '../../home/index'; // Importe o componente de dashboard que você deseja redirecionar após o login\r\n\r\nconst App = () => {\r\n    const [isLoggedIn, setIsLoggedIn] = useState(false); // Aqui, você precisa usar o array destruturing para obter o estado e a função para atualizá-lo\r\n  \r\n    useEffect(() => {\r\n        console.log(isExpiredBoolean())\r\n      //setIsLoggedIn(isExpiredBoolean());\r\n    }, []);\r\n  \r\n    return (\r\n      <Router>\r\n        <Switch>\r\n          <Route exact path=\"/pages/login\">\r\n            {!isLoggedIn ? <LoginComponent /> : <Redirect to=\"/\" />}\r\n          </Route>\r\n          <Route exact path=\"/\">\r\n            {isLoggedIn ? <Dashboard /> : <Redirect to=\"/pages/login\" />}\r\n          </Route>\r\n          <Redirect to=\"/pages/login\" />\r\n        </Switch>\r\n      </Router>\r\n    );\r\n  };\r\n\r\nexport default App;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,SAASC,aAAa,IAAIC,MAAM,EAAEC,KAAK,EAAEC,MAAM,EAAEC,QAAQ,QAAQ,kBAAkB;AACnF,OAAOC,cAAc,MAAM,SAAS;AACpC,SAAQC,gBAAgB,QAAO,SAAS;AACxC,OAAOC,SAAS,MAAM,kBAAkB,CAAC,CAAC;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAE1C,MAAMC,GAAG,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACd,MAAM,CAACC,UAAU,EAAEC,aAAa,CAAC,GAAGd,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC;;EAErDD,SAAS,CAAC,MAAM;IACZgB,OAAO,CAACC,GAAG,CAACT,gBAAgB,EAAE,CAAC;IACjC;EACF,CAAC,EAAE,EAAE,CAAC;EAEN,oBACEG,OAAA,CAACR,MAAM;IAAAe,QAAA,eACLP,OAAA,CAACN,MAAM;MAAAa,QAAA,gBACLP,OAAA,CAACP,KAAK;QAACe,KAAK;QAACC,IAAI,EAAC,cAAc;QAAAF,QAAA,EAC7B,CAACJ,UAAU,gBAAGH,OAAA,CAACJ,cAAc;UAAAc,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,QAAG,gBAAGb,OAAA,CAACL,QAAQ;UAACmB,EAAE,EAAC;QAAG;UAAAJ,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA;MAAG;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,QACjD,eACRb,OAAA,CAACP,KAAK;QAACe,KAAK;QAACC,IAAI,EAAC,GAAG;QAAAF,QAAA,EAClBJ,UAAU,gBAAGH,OAAA,CAACF,SAAS;UAAAY,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,QAAG,gBAAGb,OAAA,CAACL,QAAQ;UAACmB,EAAE,EAAC;QAAc;UAAAJ,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA;MAAG;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,QACtD,eACRb,OAAA,CAACL,QAAQ;QAACmB,EAAE,EAAC;MAAc;QAAAJ,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,QAAG;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EACvB;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,QACF;AAEb,CAAC;AAACX,EAAA,CArBED,GAAG;AAAAc,EAAA,GAAHd,GAAG;AAuBT,eAAeA,GAAG;AAAC,IAAAc,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module"}