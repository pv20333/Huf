{"ast":null,"code":"export class Schema {\n  constructor(schema) {\n    this.spec = schema;\n  }\n  getFieldType(fieldName) {\n    var _a;\n    return (_a = this.spec) === null || _a === void 0 ? void 0 : _a[fieldName];\n  }\n  getKeys() {\n    return Object.keys(this.spec);\n  }\n  setSchemaOptionsForAllType(data) {\n    if (data === this.data) {\n      return;\n    }\n    Object.entries(this.spec).forEach(_ref => {\n      let [key, type] = _ref;\n      type.setSchemaOptions(this.spec, data === null || data === void 0 ? void 0 : data[key]);\n    });\n    this.data = data;\n  }\n  checkForField(fieldName, data) {\n    this.setSchemaOptionsForAllType(data);\n    const fieldChecker = this.spec[fieldName];\n    if (!fieldChecker) {\n      // fieldValue can be anything if no schema defined\n      return {\n        hasError: false\n      };\n    }\n    return fieldChecker.check(data[fieldName], data, fieldName);\n  }\n  checkForFieldAsync(fieldName, data) {\n    this.setSchemaOptionsForAllType(data);\n    const fieldChecker = this.spec[fieldName];\n    if (!fieldChecker) {\n      // fieldValue can be anything if no schema defined\n      return Promise.resolve({\n        hasError: false\n      });\n    }\n    return fieldChecker.checkAsync(data[fieldName], data, fieldName);\n  }\n  check(data) {\n    const checkResult = {};\n    Object.keys(this.spec).forEach(key => {\n      if (typeof data === 'object') {\n        checkResult[key] = this.checkForField(key, data);\n      }\n    });\n    return checkResult;\n  }\n  checkAsync(data) {\n    const checkResult = {};\n    const promises = [];\n    const keys = [];\n    Object.keys(this.spec).forEach(key => {\n      keys.push(key);\n      promises.push(this.checkForFieldAsync(key, data));\n    });\n    return Promise.all(promises).then(values => {\n      for (let i = 0; i < values.length; i += 1) {\n        checkResult[keys[i]] = values[i];\n      }\n      return checkResult;\n    });\n  }\n}\nexport function SchemaModel(o) {\n  return new Schema(o);\n}\nSchemaModel.combine = function combine() {\n  for (var _len = arguments.length, specs = new Array(_len), _key = 0; _key < _len; _key++) {\n    specs[_key] = arguments[_key];\n  }\n  return new Schema(specs.map(model => model.spec).reduce((accumulator, currentValue) => Object.assign(accumulator, currentValue), {}));\n};","map":{"version":3,"sources":["../src/Schema.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["export class Schema {\n    constructor(schema) {\n        this.spec = schema;\n    }\n    getFieldType(fieldName) {\n        var _a;\n        return (_a = this.spec) === null || _a === void 0 ? void 0 : _a[fieldName];\n    }\n    getKeys() {\n        return Object.keys(this.spec);\n    }\n    setSchemaOptionsForAllType(data) {\n        if (data === this.data) {\n            return;\n        }\n        Object.entries(this.spec).forEach(([key, type]) => {\n            type.setSchemaOptions(this.spec, data === null || data === void 0 ? void 0 : data[key]);\n        });\n        this.data = data;\n    }\n    checkForField(fieldName, data) {\n        this.setSchemaOptionsForAllType(data);\n        const fieldChecker = this.spec[fieldName];\n        if (!fieldChecker) {\n            // fieldValue can be anything if no schema defined\n            return { hasError: false };\n        }\n        return fieldChecker.check(data[fieldName], data, fieldName);\n    }\n    checkForFieldAsync(fieldName, data) {\n        this.setSchemaOptionsForAllType(data);\n        const fieldChecker = this.spec[fieldName];\n        if (!fieldChecker) {\n            // fieldValue can be anything if no schema defined\n            return Promise.resolve({ hasError: false });\n        }\n        return fieldChecker.checkAsync(data[fieldName], data, fieldName);\n    }\n    check(data) {\n        const checkResult = {};\n        Object.keys(this.spec).forEach(key => {\n            if (typeof data === 'object') {\n                checkResult[key] = this.checkForField(key, data);\n            }\n        });\n        return checkResult;\n    }\n    checkAsync(data) {\n        const checkResult = {};\n        const promises = [];\n        const keys = [];\n        Object.keys(this.spec).forEach((key) => {\n            keys.push(key);\n            promises.push(this.checkForFieldAsync(key, data));\n        });\n        return Promise.all(promises).then(values => {\n            for (let i = 0; i < values.length; i += 1) {\n                checkResult[keys[i]] = values[i];\n            }\n            return checkResult;\n        });\n    }\n}\nexport function SchemaModel(o) {\n    return new Schema(o);\n}\nSchemaModel.combine = function combine(...specs) {\n    return new Schema(specs\n        .map(model => model.spec)\n        .reduce((accumulator, currentValue) => Object.assign(accumulator, currentValue), {}));\n};\n//# sourceMappingURL=Schema.js.map"]},"metadata":{},"sourceType":"module"}