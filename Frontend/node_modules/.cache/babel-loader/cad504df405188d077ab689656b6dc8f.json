{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\tiago\\\\OneDrive\\\\Documentos\\\\GitHub\\\\Huf\\\\Frontend\\\\src\\\\view\\\\pages\\\\preencher-PP\\\\tabelaMaquinass.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { Table } from 'antd';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst columns = [{\n  title: 'ID',\n  dataIndex: 'n_Maquina'\n}, {\n  title: 'Marca/Modelo',\n  dataIndex: 'MarcaModelo'\n}, {\n  title: 'ForcaFecho',\n  dataIndex: 'ForcaFecho'\n}, {\n  title: 'DiametroFuso',\n  dataIndex: 'DiametroFuso'\n}];\nconst App = () => {\n  _s();\n  const [machineData, setMachineData] = useState([]);\n  useEffect(() => {\n    // Pegar o ID da máquina da URL\n    const urlParams = new URLSearchParams(window.location.search);\n    const machineId = urlParams.get('maquina');\n    if (machineId) {\n      // Fazer a requisição para o servidor usando o ID da máquina\n      axios.get(`http://localhost:8080/api/listarppForm/details/maquina?id=${machineId}`).then(response => {\n        console.log(response.data);\n        const machineInfo = response.data;\n        machineInfo.key = machineInfo.n_Maquina;\n        setMachineData([machineInfo]); // Colocando dentro de um array porque o antd espera um array como dataSource\n      }).catch(error => {\n        console.error(\"Erro ao buscar os dados da máquina:\", error);\n      });\n    }\n  }, []);\n  return /*#__PURE__*/_jsxDEV(Table, {\n    columns: columns,\n    dataSource: machineData,\n    size: \"small\",\n    pagination: false\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 48,\n    columnNumber: 5\n  }, this);\n};\n_s(App, \"gTKUBCK4Wgo4Vj9Xyeh9hZbN6to=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","Table","axios","jsxDEV","_jsxDEV","columns","title","dataIndex","App","_s","machineData","setMachineData","urlParams","URLSearchParams","window","location","search","machineId","get","then","response","console","log","data","machineInfo","key","n_Maquina","catch","error","dataSource","size","pagination","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/tiago/OneDrive/Documentos/GitHub/Huf/Frontend/src/view/pages/preencher-PP/tabelaMaquinass.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { Table } from 'antd';\r\nimport axios from 'axios';\r\n\r\nconst columns = [\r\n  {\r\n    title: 'ID',\r\n    dataIndex: 'n_Maquina',\r\n  },\r\n  {\r\n    title: 'Marca/Modelo',\r\n    dataIndex: 'MarcaModelo',\r\n  },\r\n  {\r\n    title: 'ForcaFecho',\r\n    dataIndex: 'ForcaFecho',\r\n  },\r\n  {\r\n    title: 'DiametroFuso',\r\n    dataIndex: 'DiametroFuso',\r\n  },\r\n];\r\n\r\nconst App = () => {\r\n  const [machineData, setMachineData] = useState([]);\r\n\r\n  useEffect(() => {\r\n    // Pegar o ID da máquina da URL\r\n    const urlParams = new URLSearchParams(window.location.search);\r\n    const machineId = urlParams.get('maquina');\r\n\r\n    if (machineId) {\r\n      // Fazer a requisição para o servidor usando o ID da máquina\r\n      axios.get(`http://localhost:8080/api/listarppForm/details/maquina?id=${machineId}`)\r\n        .then(response => {\r\n          console.log(response.data);\r\n          const machineInfo = response.data;\r\n          machineInfo.key = machineInfo.n_Maquina;\r\n          setMachineData([machineInfo]); // Colocando dentro de um array porque o antd espera um array como dataSource\r\n        })\r\n        .catch(error => {\r\n          console.error(\"Erro ao buscar os dados da máquina:\", error);\r\n        });\r\n    }\r\n  }, []);\r\n\r\n  return (\r\n    <Table columns={columns} dataSource={machineData} size=\"small\" pagination={false} />\r\n  );\r\n};\r\n\r\nexport default App;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,SAASC,KAAK,QAAQ,MAAM;AAC5B,OAAOC,KAAK,MAAM,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE1B,MAAMC,OAAO,GAAG,CACd;EACEC,KAAK,EAAE,IAAI;EACXC,SAAS,EAAE;AACb,CAAC,EACD;EACED,KAAK,EAAE,cAAc;EACrBC,SAAS,EAAE;AACb,CAAC,EACD;EACED,KAAK,EAAE,YAAY;EACnBC,SAAS,EAAE;AACb,CAAC,EACD;EACED,KAAK,EAAE,cAAc;EACrBC,SAAS,EAAE;AACb,CAAC,CACF;AAED,MAAMC,GAAG,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAChB,MAAM,CAACC,WAAW,EAAEC,cAAc,CAAC,GAAGZ,QAAQ,CAAC,EAAE,CAAC;EAElDC,SAAS,CAAC,MAAM;IACd;IACA,MAAMY,SAAS,GAAG,IAAIC,eAAe,CAACC,MAAM,CAACC,QAAQ,CAACC,MAAM,CAAC;IAC7D,MAAMC,SAAS,GAAGL,SAAS,CAACM,GAAG,CAAC,SAAS,CAAC;IAE1C,IAAID,SAAS,EAAE;MACb;MACAf,KAAK,CAACgB,GAAG,CAAE,6DAA4DD,SAAU,EAAC,CAAC,CAChFE,IAAI,CAACC,QAAQ,IAAI;QAChBC,OAAO,CAACC,GAAG,CAACF,QAAQ,CAACG,IAAI,CAAC;QAC1B,MAAMC,WAAW,GAAGJ,QAAQ,CAACG,IAAI;QACjCC,WAAW,CAACC,GAAG,GAAGD,WAAW,CAACE,SAAS;QACvCf,cAAc,CAAC,CAACa,WAAW,CAAC,CAAC,CAAC,CAAC;MACjC,CAAC,CAAC,CACDG,KAAK,CAACC,KAAK,IAAI;QACdP,OAAO,CAACO,KAAK,CAAC,qCAAqC,EAAEA,KAAK,CAAC;MAC7D,CAAC,CAAC;IACN;EACF,CAAC,EAAE,EAAE,CAAC;EAEN,oBACExB,OAAA,CAACH,KAAK;IAACI,OAAO,EAAEA,OAAQ;IAACwB,UAAU,EAAEnB,WAAY;IAACoB,IAAI,EAAC,OAAO;IAACC,UAAU,EAAE;EAAM;IAAAC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,QAAG;AAExF,CAAC;AAAC1B,EAAA,CA1BID,GAAG;AAAA4B,EAAA,GAAH5B,GAAG;AA4BT,eAAeA,GAAG;AAAC,IAAA4B,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module"}